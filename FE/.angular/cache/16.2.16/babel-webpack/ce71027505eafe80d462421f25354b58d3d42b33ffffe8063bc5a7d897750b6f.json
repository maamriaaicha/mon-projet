{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8000/api/tutorials';\nconst baseUrl1 = 'http://localhost:8000/api/tutorials/';\nexport class TutorialService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  get(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  create(data) {\n    return this.http.post(baseUrl1, data);\n  }\n  update(id, data) {\n    return this.http.put(`${baseUrl}/${id}/`, data);\n  }\n  delete(id) {\n    // Ensure that the ID is not undefined or null before constructing the URL\n    const url = id ? `${baseUrl1}${id}/` : baseUrl1; // If id is present, add it to the URL, otherwise use baseUrl1 (for deleteAll)\n    return this.http.delete(url);\n  }\n  deleteAll() {\n    return this.http.delete(baseUrl1);\n  }\n  findByTitle(title) {\n    return this.http.get(`${baseUrl}?title=${title}`);\n  }\n  static {\n    this.ɵfac = function TutorialService_Factory(t) {\n      return new (t || TutorialService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TutorialService,\n      factory: TutorialService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["baseUrl","baseUrl1","TutorialService","constructor","http","getAll","get","id","create","data","post","update","put","delete","url","deleteAll","findByTitle","title","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Hanin\\OneDrive\\Bureau\\FE\\src\\app\\services\\tutorial.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Tutorial } from '../models/tutorial.model';\n\nconst baseUrl = 'http://localhost:8000/api/tutorials';\nconst baseUrl1 = 'http://localhost:8000/api/tutorials/';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TutorialService {\n\n  constructor(private http: HttpClient) { }\n\n  getAll(): Observable<Tutorial[]> {\n    return this.http.get<Tutorial[]>(baseUrl);\n  }\n\n  get(id: any): Observable<Tutorial> {\n    return this.http.get<Tutorial>(`${baseUrl}/${id}`);\n  }\n\n  create(data: any): Observable<any> {\n    return this.http.post(baseUrl1, data);\n  }\n\n  update(id: any, data: any): Observable<any> {\n    return this.http.put(`${baseUrl}/${id}/`, data);\n  }\n  \n  delete(id: any): Observable<any> {\n    // Ensure that the ID is not undefined or null before constructing the URL\n    const url = id ? `${baseUrl1}${id}/` : baseUrl1;  // If id is present, add it to the URL, otherwise use baseUrl1 (for deleteAll)\n    return this.http.delete(url);\n  }\n  \n\n  deleteAll(): Observable<any> {\n    return this.http.delete(baseUrl1);\n  }\n\n  findByTitle(title: any): Observable<Tutorial[]> {\n    return this.http.get<Tutorial[]>(`${baseUrl}?title=${title}`);\n  }\n}"],"mappings":";;AAKA,MAAMA,OAAO,GAAG,qCAAqC;AACrD,MAAMC,QAAQ,GAAG,sCAAsC;AAMvD,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAaN,OAAO,CAAC;EAC3C;EAEAM,GAAGA,CAACC,EAAO;IACT,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAW,GAAGN,OAAO,IAAIO,EAAE,EAAE,CAAC;EACpD;EAEAC,MAAMA,CAACC,IAAS;IACd,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACT,QAAQ,EAAEQ,IAAI,CAAC;EACvC;EAEAE,MAAMA,CAACJ,EAAO,EAAEE,IAAS;IACvB,OAAO,IAAI,CAACL,IAAI,CAACQ,GAAG,CAAC,GAAGZ,OAAO,IAAIO,EAAE,GAAG,EAAEE,IAAI,CAAC;EACjD;EAEAI,MAAMA,CAACN,EAAO;IACZ;IACA,MAAMO,GAAG,GAAGP,EAAE,GAAG,GAAGN,QAAQ,GAAGM,EAAE,GAAG,GAAGN,QAAQ,CAAC,CAAE;IAClD,OAAO,IAAI,CAACG,IAAI,CAACS,MAAM,CAACC,GAAG,CAAC;EAC9B;EAGAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACX,IAAI,CAACS,MAAM,CAACZ,QAAQ,CAAC;EACnC;EAEAe,WAAWA,CAACC,KAAU;IACpB,OAAO,IAAI,CAACb,IAAI,CAACE,GAAG,CAAa,GAAGN,OAAO,UAAUiB,KAAK,EAAE,CAAC;EAC/D;;;uBAjCWf,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfnB,eAAe;MAAAoB,OAAA,EAAfpB,eAAe,CAAAqB,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}